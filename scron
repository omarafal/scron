#!/bin/bash

s_path=$(dirname $(realpath $0))

# check dependencies
$s_path/install_depend.sh python

if (( $? != 0 ))
then
	exit 1
fi

$s_path/install_depend.sh crontab

if (( $? != 0 ))
then
	exit 1
elif (( $? == 100 ))
then
	exit
fi


# check if command directory exists
if [ ! -d $s_path/commands ]
then
	mkdir $s_path/commands
fi

# help menu
print_help() {
	echo "Correct usage:"
	echo -e "scron [OPTION]\n"
	echo "Options:"
	echo -e "  -h\tdisplay help menu"
	echo -e "  -f\tspecify commands file"
	echo -e "  -p\tpurge; empty ALL scheduled commands"
	echo -e "  -l\tlist scheduled commands"
	echo -e "  -t\tset time for scheduled commands"
	echo -e "  -c\tschedule a single command"
	echo -e "  -r\trestore the scron file to the last state it was in"
}

# clear out scron and crontab files
purge() {

	crontab -l > /dev/null 2>&1

	# if no crontab file found
	if [ ! $? -eq 0 ]
	then
		scron -l > /dev/null

		if [ $? -eq 0 ]
		then

			echo "No scheduled commands in crontab found for this user, clearing scron files anyway."
		else
			exit 204	
		fi
	fi

	verbose_clear=$s_path/commands/verbose_cmds.scron
	short_clear=$s_path/commands/short_cmds.scron
	
	# prompt for confirmation and create backup
	read -p "Are you sure you want to remove ALL the currently scheduled commands?(Y/n): " do_clear
	
	if [[ $do_clear != 'Y' ]]
	then
		echo "Aborting."
		exit 101
	fi
	
	crontab -r > /dev/null 2>&1

	if [ ! -d $s_path/backups ]
	then
		mkdir $s_path/backups
	fi
	

	# make a backup directory to store old files
	backup_dir="$s_path/backups/$(date +'[%N]%F')"
	
	if [ ! -d $backup_dir ]
	then
		mkdir $backup_dir
	fi

	cp $verbose_clear $backup_dir/
	cp $short_clear $backup_dir/

	truncate -s 0 $verbose_clear && truncate -s 0 $short_clear
	 

	echo "Created a backup for the last state."
	echo "Successfully cleared the crontab file."

	exit 0
}

inner_set() {

	crontab -T $s_path/commands/verbose_cmds.tmp > /dev/null 2>&1
	# check if crontab is successful then copy to original files from temp
	if [ $? -eq 0 ]
	then
		cat $s_path/commands/verbose_cmds.tmp >> $s_path/commands/verbose_cmds.scron
		cat $s_path/commands/short_cmds.tmp >> $s_path/commands/short_cmds.scron
				
		cat $s_path/commands/verbose_cmds.scron >> $s_path/commands/current.bkup

		# make crontab read the file
		crontab $s_path/commands/verbose_cmds.scron > /dev/null 2>&1

		# check for logs directory
		if [ ! -d $s_path/logs ]
		then
			mkdir $s_path/logs
		fi

		echo "Successfully scheduled provided commands."
		echo "You can view all the scheduled commands by scron -l"
		exit 0
	else
		echo "[ERROR] Something went wrong, please check your commands' syntax." >&2
		exit 201
	fi
}

# handle commands file
set_cmds(){
	#cat $1
	#file_content=$(cat $1)
	
	# check if file or command
	if [[ "$cmd" != null ]]
	then
		python3 $s_path/parse_content.py "$1" "$2" "$3" "cmd"

		if [ $? -eq 0 ]
		then
			inner_set
		fi
		exit
	fi

	if [ -f $1 ]
	then
		
		# send file name and time to python
		python3 $s_path/parse_content.py $1 "$2" $3 2> /dev/null

		if [ $? -eq 0 ]
		then
			inner_set
		fi
	else
		echo "[ERROR] No such file found." >&2
		exit 203
	fi

}

# list all scheduled commands
list() {
	# check if file is empty
	if [ ! -s $s_path/commands/short_cmds.scron ]
	then
		echo "[ERROR] No scheduled commands found in scron." >&2
		exit 204
	fi

	
	cat $s_path/commands/short_cmds.scron
	exit 0
}

# restore scron file to the last state in case it was tampered with
restore() {

	# This feature is kinda useless for now but its main functionality is yet to be made

	if [ ! -s $s_path/commands/current.bkup ]
	then
		echo "[ERROR] No backup found, you have to first schedule commands."
		exit 204
	fi

	cat $s_path/commands/current.bkup > $s_path/commands/verbose_cmds.scron
	
	echo "Successfully restored the scron file to its last state."
	exit 0
}

# variables
time=null
file=null
cmd=null # this var is for one line command

# options
while getopts ":hf:plt:rc:" opt
do
	case $opt in
		h) print_help && exit 0;;
		f) file=$OPTARG;;
		p) purge;;
		l) list;; 
		t) time=$OPTARG;;
		r) restore ;;
		c) cmd="$OPTARG" ;;
		:) echo "[ERROR] scron -$OPTARG requires argument(s)" >&2; exit 4 ;;
		\?) echo -e "[ERROR] Invalid option\n" >&2 && print_help ; exit 1;;
		*) echo "Error" && exit 255
	esac
done

# check variables are set

if [[ $time != null ]]
then
	if [[ $file == null ]]
	then
		if [[ $cmd == null ]]
		then
			echo "[ERROR] Missing file/command or time arguments." >&2
			echo "Example usage: scron -t \"23 Jan @ 8:30 AM\" -f file.txt "
			exit 2
		else
			set_cmds "$cmd" "$time" $s_path
		fi
	else
		if [[ $cmd != null ]]
		then
			echo "[ERROR] Invalid command syntax" >&2
			echo "Don't use -c and -f together, please refer to examples in the documentation."
			exit 5
		else
			set_cmds "$file" "$time" $s_path
		fi
	fi
else
	echo "[ERROR] Missing file/command or time arguments." >&2
	echo "Example usage: scron -t \"23 Jan @ 8:30 AM\" -f file.txt "
	exit 2
fi

